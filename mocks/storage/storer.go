// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=mocks/storer.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "avito/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *MockStorer) CreateBanner(ctx context.Context, banner model.BannerCreate) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", ctx, banner)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockStorerMockRecorder) CreateBanner(ctx, banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockStorer)(nil).CreateBanner), ctx, banner)
}

// DeleteBanner mocks base method.
func (m *MockStorer) DeleteBanner() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBanner")
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockStorerMockRecorder) DeleteBanner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockStorer)(nil).DeleteBanner))
}

// GetBanners mocks base method.
func (m *MockStorer) GetBanners(ctx context.Context, bannersFilters model.BannersFilter) ([]model.BannerCreate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanners", ctx, bannersFilters)
	ret0, _ := ret[0].([]model.BannerCreate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanners indicates an expected call of GetBanners.
func (mr *MockStorerMockRecorder) GetBanners(ctx, bannersFilters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanners", reflect.TypeOf((*MockStorer)(nil).GetBanners), ctx, bannersFilters)
}

// UpdateBanner mocks base method.
func (m *MockStorer) UpdateBanner(ctx context.Context, banner model.BannerUpdateRequest) (model.BannerCreate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", ctx, banner)
	ret0, _ := ret[0].(model.BannerCreate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBanner indicates an expected call of UpdateBanner.
func (mr *MockStorerMockRecorder) UpdateBanner(ctx, banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockStorer)(nil).UpdateBanner), ctx, banner)
}
